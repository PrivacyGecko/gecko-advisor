name: privacy-advisor-stage
services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: privacy
    volumes:
      - privacy-postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7
    volumes:
      - privacy-redis:/data
    restart: unless-stopped

  backend:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER:-pothamsetty}/privacy-advisor-backend:stage-latest
    pull_policy: always
    environment:
      NODE_ENV: production
      APP_ENV: stage
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@db:5432/privacy}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      ADMIN_API_KEY: ${ADMIN_API_KEY:?Set stage ADMIN_API_KEY}
      BASE_URL: ${BASE_URL:-https://stage.geckoadvisor.com}
      BACKEND_PUBLIC_URL: ${BACKEND_PUBLIC_URL:-https://stageapi.geckoadvisor.com}
      FRONTEND_PUBLIC_URL: ${FRONTEND_PUBLIC_URL:-https://stage.geckoadvisor.com}
      BACKEND_PORT: ${BACKEND_PORT:-5000}
    expose:
      - "5000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:5000/api/health',res=>process.exit(res.statusCode===200?0:1)).on('error',()=>process.exit(1))\" "]
      interval: 10s
      timeout: 5s
      retries: 5

  worker:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER:-pothamsetty}/privacy-advisor-worker:stage-latest
    pull_policy: always
    environment:
      NODE_ENV: production
      APP_ENV: stage
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@db:5432/privacy}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      WORKER_PUBLIC_URL: ${WORKER_PUBLIC_URL:-https://sworker.geckoadvisor.com}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:5050/health',res=>process.exit(res.statusCode===200?0:1)).on('error',()=>process.exit(1))\" "]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER:-pothamsetty}/privacy-advisor-frontend:stage-latest
    pull_policy: always
    environment:
      APP_ENV: stage
      FRONTEND_PUBLIC_URL: ${FRONTEND_PUBLIC_URL:-https://stage.geckoadvisor.com}
      BACKEND_PUBLIC_URL: ${BACKEND_PUBLIC_URL:-https://stageapi.geckoadvisor.com}

      # Backend Proxy URL for internal Docker networking
      # Use http://backend:5000 for Coolify deployments where frontend and backend are on same network
      # This avoids Cloudflare SSL handshake issues when using external domains
      BACKEND_PROXY_URL: ${BACKEND_PROXY_URL:-http://backend:5000}

      CSP: ${CSP:-}
    depends_on:
      backend:
        condition: service_started
    expose:
      - "80"
    restart: unless-stopped

volumes:
  privacy-postgres:
  privacy-redis:
